---
- name: "Pull AdGuard image"
  containers.podman.podman_image:
    name: "{{ container.image }}"

- name: Create directory to store resolved configurations
  file:
    path: "/etc/systemd/resolved.conf.d"
    state: "directory"
    recurse: true

- name: Copy modified resolved configuration
  ansible.builtin.copy:
    src: "adguardhome.conf"
    dest: "/etc/systemd/resolved.conf.d/adguardhome.conf"

- name: "Backup resolved config"
  ansible.builtin.command: "mv /etc/resolv.conf /etc/resolv.conf.backup"

- name: "Link to AdGuard-friendly config"
  ansible.builtin.file:
    src: "/run/systemd/resolve/resolv.conf"
    dest: "/etc/resolv.conf"
    state: "link"

- name: "Reload systemd-resolved"
  service:
    name: systemd-resolved
    state: restarted

- name: Creates AdGuard work directory
  file:
    path: "{{ host.volumes.work }}"
    state: "directory"

- name: Creates AdGuard conf directory
  file:
    path: "{{ host.volumes.config }}"
    state: "directory"

- name: Copy AdGuard Config
  ansible.builtin.template:
    src: "AdGuardHome.yaml.j2"
    dest: "{{ host.volumes.config }}/AdGuardHome.yaml"

- name: Modify SELinux to allow necessary ports for AdGuard
  community.general.seport:
    ports: "{{ item.value.port }}"
    proto: "{{ item.value.proto }}"
    setype: "http_port_t"
    state: "present"
  loop: "{{ network.ports|dict2items }}"

- name: "Start AdGuard"
  containers.podman.podman_container:
    name: "{{ container.name }}"
    image: "{{ container.image }}"
    state: "started"
    recreate: true
    expose:
      - "{{ network.ports.dns_tcp.expose }}"
      - "{{ network.ports.dns_udp.expose }}"
      - "{{ network.ports.dns_https_tcp.expose }}"
      - "{{ network.ports.dns_https_udp.expose }}"
      - "{{ network.ports.webui.expose }}"
    ports:
      - "{{ network.ports.dns_tcp.bind }}"
      - "{{ network.ports.dns_udp.bind }}"
      - "{{ network.ports.dns_https_tcp.bind }}"
      - "{{ network.ports.dns_https_udp.bind }}"
      - "{{ network.ports.webui.bind }}"
    volumes:
      - "{{ host.volumes.config }}:{{ container.volumes.config }}:Z"
      - "{{ host.volumes.work }}:{{ container.volumes.work }}:Z"
    restart_policy: always
